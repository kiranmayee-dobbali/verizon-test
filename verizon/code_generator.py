from datetime import date, datetime
from decimal import Decimal, getcontext
from math import factorial


class CodeGenerator:
    """This a class to generate a 4 digit random code number."""

    @staticmethod
    def calculate_n1() -> int:
        """Return sum of day,month and year of current date"""

        today = date.today()
        year = today.strftime("%Y")
        month = today.strftime("%m")
        day = today.strftime("%d")
        n_1 = int(day) + int(month) + int(year[-2:])
        return n_1

    @staticmethod
    def calculate_n2() -> int:
        """Return sum of hour, minute and seconds of current time """

        now = datetime.now()
        current_hour = now.strftime("%H")
        current_minute = now.strftime("%M")
        current_second = now.strftime("%S")
        n_2 = int(current_hour) + int(current_minute) + int(current_second)
        return n_2

    @staticmethod
    def sum_digits_number(number: int) -> int:
        """Return sum of digits in a number.
        
        :param int number: A number for which sum of digits to be calculated

        >>> sum_digits_number(1234)
        10
        >>> sum_digits_number(0)
        0

         """

        total = 0
        while number > 0:
            total = total + int(number % 10)
            number = int(number / 10)
        return total

    def calculate_n3(self) -> int:
        """Return sum of rounded 5 digits in decimal part of seconds value."""

        now = datetime.now()
        current_second = now.strftime("%S.%f")
        current_second = round(float(current_second), 5)
        decimal_part = str(current_second)
        decimal_part = decimal_part.split(".")
        decimal_part = int(decimal_part[-1])
        n_3 = self.sum_digits_number(decimal_part)
        return n_3

    @staticmethod
    def calculate_n4(n_1: int, n_2: int, n_3: int) -> int:
        """Return reminder of sum of arguments when divided by 7

        :param int n_1: A number which is sum of current date
        :param int n_2: A number which is sum of current time
        :param int n_3: A number which is sum of rounded five digits in decimal part of current seconds value

        >>> calculate_n4(1,2,3)
        6
        >>> calculate_n4(9,6,10)
        4

        Input : n_1, n_2, n_3 positions of pi decimal value.
        """

        n_4 = sum([n_1, n_2, n_3]) % 7
        return n_4

    @staticmethod
    def get_nth_digit(pi: Decimal, position: int) -> int:
        """Get the digit in the decimal part of pi value at given position.

        :param int pi: A decimal value of pi(22/7)
        :param int position: A number which denotes position in decimal part of pi value.


        >>> get_nth_digit(3.141529,3)
        1
        >>> get_nth_digit(3.141529,5)
        2

        """

        pi = str(pi)
        decimal = pi.split(".")[-1]
        value = decimal[position - 1]
        return int(value)

    @staticmethod
    def get_pi_value(n_1: int, n_2: int, n_3: int, n_4: int) -> Decimal:
        """Calculate pi value.

        pi value is generated by using Chudnovsky Algorithm.
        Refer this page for details: https://en.wikipedia.org/wiki/Chudnovsky_algorithm

        :param int n_1: A number which is sum of current date
        :param int n_2: A number which is sum of current time
        :param int n_3: A number which is sum of rounded five digits in decimal part of current seconds value
        :param int n_4: A number which is calculated by sum of n_1, n_2, n_3 mod 7
        """

        maximum = max(n_1, n_2, n_3, n_4)
        getcontext().prec = maximum + 1
        pi = Decimal(0)

        for k in range(maximum):
            numerator = ((-1) ** k) * (factorial(6 * k) * (13591409 + 545140134 * k))
            denominator = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))
            pi += Decimal(numerator) / Decimal(denominator)
        pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5))
        pi = 1 / pi
        return pi

    def generate_random_number(self) -> int:
        """Generate 4 digit random number using n_1, n_2, n_3 and n_4.

        Return : new_random_number which is 4 digit code.
        """

        n_1 = self.calculate_n1()
        n_2 = self.calculate_n2()
        n_3 = self.calculate_n3()
        n_4 = self.calculate_n4(n_1, n_2, n_3)
        new_random_number = 0
        pi = self.get_pi_value(n_1, n_2, n_3, n_4)
        k = 0
        for n in [n_1, n_2, n_3, n_4]:
            value = self.get_nth_digit(pi, n)
            new_random_number += value * (10 ** k)
            k += 1
        return new_random_number


#help(CodeGenerator)
